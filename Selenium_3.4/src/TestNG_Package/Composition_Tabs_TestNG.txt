package TestNG_Package;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.InetAddress;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Properties;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.testng.annotations.Test;

public class Composition_Tabs_TestNG {
	
	private static WebElement element = null;
	private static String class_name = "Composition_Tabs";
	private static String fund_name = null;
	private static String HTMLFile = null;
	private static String InputTestDataFile = null;
	private static String outputexcelfile = null;
	private static WebDriver Driver = null;
	private static Connection DB_Connect = null;
	
	private static ArrayList<String> HTML_Table = new ArrayList<>();
	private static ArrayList<String> HTML_Data_Point = new ArrayList<>();
	private static ArrayList<String> HTML_UI_Status = new ArrayList<>();
	private static ArrayList<String> HTML_UI_Value = new ArrayList<>();
	private static ArrayList<String> HTML_DB_Value = new ArrayList<>();
	private static ArrayList<String> HTML_UIVsDB_Status = new ArrayList<>();
	private static ArrayList<String> HTML_DB_Query = new ArrayList<>();
	private static ArrayList<String> HTML_ExpectedAsOfDate = new ArrayList<>();
	private static ArrayList<String> HTML_ActualAsOfDate = new ArrayList<>();
	private static ArrayList<String> HTML_AsOfDate_Status = new ArrayList<>();
	private static ArrayList<String> HTML_SnapshotPath = new ArrayList<>();
	
	public static ArrayList<String> Excel_Execute = new ArrayList<>();
	public static ArrayList<String> Excel_WebsiteTab = new ArrayList<>();
	public static ArrayList<String> Excel_Table = new ArrayList<>();
	public static ArrayList<String> Excel_DataPoint = new ArrayList<>();
	public static ArrayList<String> Excel_Priority = new ArrayList<>();
	public static ArrayList<String> Excel_Frequency = new ArrayList<>();
	public static ArrayList<String> Excel_Tolerance_Range = new ArrayList<>();
	public static ArrayList<String> Excel_Modified_SQL = new ArrayList<>();
	public static ArrayList<String> Excel_UI_Element = new ArrayList<>();
	public static ArrayList<String> Excel_UI_Vs_DB = new ArrayList<>();
	public static ArrayList<String> Excel_UI_Value = new ArrayList<>();
	public static ArrayList<String> Excel_DB_Value = new ArrayList<>();
	public static ArrayList<String> Excel_Periodic_Check = new ArrayList<>();
	public static ArrayList<String> Excel_Expected_Date = new ArrayList<>();
	public static ArrayList<String> Excel_Actual_Date = new ArrayList<>();
	public static ArrayList<String> Excel_Tolerance_Applied = new ArrayList<>();
	public static ArrayList<String> Excel_Tolerance_Treshold = new ArrayList<>();
	public static ArrayList<String> Excel_Actual_Swing = new ArrayList<>();
	public static ArrayList<String> Excel_Snapshot = new ArrayList<>();
	
	private static String MaturityDistributionscreenshot = null;
	private static String RegionBreakdownscreenshot = null;
	private static String SectorAllocationscreenshot = null;
	private static String CreditRatingscreenshot = null;
	private static String CreditRatingscreenshot_SandP = null;
	private static String CreditRatingscreenshot_Moodys = null;
	private static String CreditRatingscreenshot_Fitch = null;
	private static String Top10Holdingscreenshot = null;
		
	private static String EffectiveMaturityAsOfDate= null;
	private static String MaturityDistributionAsOfDate= null;
	private static String RegionBreakdownAsOfDate= null;
	private static String SectorAllocationAsOfDate= null;
	private static String CreditRatingAsOfDate= null;
	private static String Top10HoldingAsOfDate= null;
	
	private static String Composition_Tabs_Locator = null;
	private static String CreditRating_SPRadio_Locator = null;
	private static String CreditRating_MoodyRadio_Locator = null;
	private static String CreditRating_FitchRadio_Locator = null;
	
	private static String Hostname = null;
	
	private static String Already_Executed = null;
	
	private static String Maturity_Distribution_Table_Locator_For_Wait = null;
	
	private static long Random = 0;
	
	private static boolean FirstRun = true;
	
	 @Test
	 public void Composition_Tabs() throws Throwable {
	 
		//Load the Properties File
		File propfile = new File(Common_Functions.PropertiesFilePath+class_name+".properties");
		FileInputStream Fip = new FileInputStream(propfile);
		Properties prop = new Properties();
		prop.load(Fip);
		
		//Get the locators from the property file
		Composition_Tabs_Locator = prop.getProperty("Composition_Tabs_Locator");
		CreditRating_SPRadio_Locator = prop.getProperty("CreditRating_SPRadio_Locator");
		CreditRating_MoodyRadio_Locator = prop.getProperty("CreditRating_MoodyRadio_Locator");
		CreditRating_FitchRadio_Locator = prop.getProperty("CreditRating_FitchRadio_Locator");
		Maturity_Distribution_Table_Locator_For_Wait = prop.getProperty("Maturity_Distribution_Table_Locator_For_Wait");
		
		//HYS|MINT|BOND|STPZ|MUNI|CORP|ILB|TUZ|SMMU|LTPZ|ZROZ|TIPZ|DI|LDUR
		
		//Get the Fund Names
		String AllFunds = Common_Functions.fn_Get_Fund_Names_With_Pipe_Seperation();
		String [] SplitFunds = AllFunds.split("\\|");

		//Wait for certain milliseconds to avoid collision during the parallel executions
		Random = Common_Functions.fn_generate_Random_Number(500, 1000);
		Thread.sleep(Random);
		
		//Get the Host Name
		Hostname = InetAddress.getLocalHost().getHostName();
		
		for (int i = 0; i < SplitFunds.length; i++) {
			
			element = null;
			class_name = "Composition_Tabs";
			fund_name = null;
			HTMLFile = null;
			InputTestDataFile = null;
			outputexcelfile = null;
			Driver = null;
			DB_Connect = null;

			MaturityDistributionscreenshot = null;
			RegionBreakdownscreenshot = null;
			SectorAllocationscreenshot = null;
			CreditRatingscreenshot = null;
			CreditRatingscreenshot_SandP = null;
			CreditRatingscreenshot_Moodys = null;
			CreditRatingscreenshot_Fitch = null;
			Top10Holdingscreenshot = null;
			
			EffectiveMaturityAsOfDate= null;
			MaturityDistributionAsOfDate= null;
			RegionBreakdownAsOfDate= null;
			SectorAllocationAsOfDate= null;
			CreditRatingAsOfDate= null;
			Top10HoldingAsOfDate= null;
			
			Already_Executed = null;
			
			//Empty All the HTML array list
			Empty_HTML_Array_List();
			
			//Empty the Excel Array List
			fn_Empty_Excel_Array_List();
						
			//Get the Fund Name
			fund_name = SplitFunds[i];
			
			//Input excel file location
			InputTestDataFile = Common_Functions.InputDatalocation+fund_name+"\\"+class_name+".xls";
			
			//Output excel file location
			outputexcelfile = Common_Functions.OuputDatalocation+fund_name+"\\"+class_name+".xls"; 
			
			//Get the execution flag for the fund name and the test script
			String Exeflg = Common_Functions.fn_Get_Execution_Flag(Common_Functions.MasterInputExcel, "Script_Execution", fund_name, class_name);
			
			//Get already executed flag from DB
			Already_Executed = Common_Functions.fn_Start_ORADEVPIMDB_Update(Hostname, fund_name, class_name);
			
			if (Exeflg.equalsIgnoreCase("Y") && (Already_Executed.equalsIgnoreCase("N"))) {
				
				//System.out.println(class_name+" -> "+ fund_name);
				
				if (FirstRun) {
					try {
						
						//Get the ETF link
						String Link = Common_Functions.fn_Get_Link(fund_name);
						
						//Launch the browser and open the ETF web site
						Driver = Common_Functions.fn_Open_Browser(Link);

						//Wait for the Composition tab to get visible
						Common_Functions.fn_Wait_Property(Driver, Composition_Tabs_Locator, 10);
						Thread.sleep(500);
						
						//Click on the Composition Tab
						Driver.findElement(By.cssSelector(Composition_Tabs_Locator)).click();
						Thread.sleep(5000);
						
						//Wait for the Maturity Distribution table to get displayed
						Common_Functions.fn_Wait_Property(Driver, Maturity_Distribution_Table_Locator_For_Wait, 60);
						
						//Close the driver
						Common_Functions.fn_Close_Drvier(Driver);
						//Driver.close();
						//Driver.quit();
						
						FirstRun = false;
						
					} catch (Exception e) {
						
					}
				}
				
				//Update the Trigger status
				Common_Functions.fn_ORADEVPIMDB_Trigger_Status();
				
				//Call the Function for the Pre_Requiste Execution
				HTMLFile = Common_Functions.fn_Pre_Requiste_Execution(fund_name,class_name);
				
				//Update the ORADEVPIM DB before the execution
				Common_Functions.fn_Start_ORADEVPIMDB_Update(Hostname, fund_name, class_name, HTMLFile);
				
				//Get the ETF link
				String Link = Common_Functions.fn_Get_Link(fund_name);
				
				//Open the database connection
				DB_Connect = Common_Functions.fn_Open_DB_Connection();
				
				//Launch the browser and open the ETF web site
				Driver = Common_Functions.fn_Open_Browser(Link);
				
				Common_Functions.fn_Update_HTML(HTMLFile, class_name, "PASS", "Host Name", "The script is running in the Host Name"+Common_Functions.NextLine+Hostname, Driver, false);
				
				//Reporter event for the DB connection
				if (DB_Connect == null ) {
					Common_Functions.fn_Update_HTML(HTMLFile, class_name, "FAIL", "Verify the DB Connection is successful", "Failed to connect to the DB", Driver, false);
				} else {
					Common_Functions.fn_Update_HTML(HTMLFile, class_name, "PASS", "Verify the DB Connection is successful", "Successfully connected to DB"+Common_Functions.NextLine+DB_Connect, Driver, false);
				}
				
				//Reporter event for the Browser
				if (Driver == null) {
					Common_Functions.fn_Update_HTML(HTMLFile, class_name, "FAIL", "Verify the browser is opened successfully", "Failed to open the Browser", Driver, false);
				} else {
					Common_Functions.fn_Update_HTML(HTMLFile, class_name, "PASS", "Launching browser", "Launched browser successfully", Driver, false);
					Common_Functions.fn_Update_HTML(HTMLFile, class_name, "PASS", "Opening the ETF website for "+fund_name, "Opened the link"+Common_Functions.NextLine+Link, Driver, true);
				}
				
				//Composition validation starts
				if ((!(Driver == null)) && (!(DB_Connect == null))) {
					
					COMPOSITION_TABS_VALIDATION();
								
				}
				
				//Update the output excel sheet
				Common_Functions.fn_Update_Output_Excel(outputexcelfile, class_name, Excel_WebsiteTab, Excel_Table, Excel_DataPoint, Excel_Priority, Excel_Frequency, Excel_Tolerance_Range, Excel_Modified_SQL, Excel_UI_Element, Excel_UI_Vs_DB, Excel_UI_Value, Excel_DB_Value, Excel_Periodic_Check, Excel_Expected_Date, Excel_Actual_Date, Excel_Tolerance_Applied, Excel_Tolerance_Treshold, Excel_Actual_Swing, Excel_Snapshot);
				
				//Update the HTML
				Common_Functions.fn_BatchUpdate_HTML(HTMLFile, class_name, HTML_Table, HTML_Data_Point, HTML_UI_Value, HTML_UI_Status, HTML_DB_Query, HTML_DB_Value, HTML_UIVsDB_Status, HTML_ExpectedAsOfDate, HTML_ActualAsOfDate, HTML_AsOfDate_Status, HTML_SnapshotPath);
						
				//Close the driver
				Common_Functions.fn_Close_Drvier(Driver);
				
				//Close the DB connection
				if (!(DB_Connect == null)) {
					DB_Connect.close();
				}
				
				//End the HTML reporter
				Common_Functions.fn_End_HTML(HTMLFile);
				
				//End the ORADEVPIM DB
				Common_Functions.fn_End_ORADEVPIM_Update(Hostname, HTMLFile,  fund_name, class_name);
				
			}
			
		}

	}

	public static void COMPOSITION_TABS_VALIDATION() throws IOException, Throwable {
		
		String Tabl = null;
		String Data_Point = null;
		String Prty = null;
		String Freqncy = null;
		String Tol_Rng = null;
		String SQL_Qry = null;
		String UILoc = null;
		String AsOfDateLoc = null;
				
		ArrayList<String> MasterData = new ArrayList<>();
		ArrayList<String> Table = new ArrayList<>();
		ArrayList<String> DataPoint = new ArrayList<>();
		ArrayList<String> Priority = new ArrayList<>();
		ArrayList<String> Frequency = new ArrayList<>();
		ArrayList<String> ToleranceRange = new ArrayList<>();
		ArrayList<String> DBQuery = new ArrayList<>();
		ArrayList<String> UILocator = new ArrayList<>();
		ArrayList<String> AsOfDateLocator = new ArrayList<>();
		
		try {
			
			MasterData = Common_Functions.fn_GetDataPoint_DBQuery_CSSLocator(InputTestDataFile,class_name);
			
			//Iterate the List and get the input excel test data values
			for (int i = 0; i < MasterData.size(); i++) {
				
				String Values = MasterData.get(i);						
				String[] Splitvalue = Values.split("\\|");
				
				Table.add(Splitvalue[0]);
				DataPoint.add(Splitvalue[1]);
				Priority.add(Splitvalue[2]);
				Frequency.add(Splitvalue[3]);
				ToleranceRange.add(Splitvalue[4]);
				DBQuery.add(Splitvalue[5]);
				UILocator.add(Splitvalue[6]);
				AsOfDateLocator.add(Splitvalue[7]);
			
			}
			
			//Wait for the Composition tab to get visible
			Common_Functions.fn_Wait_Property(Driver, Composition_Tabs_Locator, 10);
			Thread.sleep(500);
			
			//Click on the Composition Tab
			Driver.findElement(By.cssSelector(Composition_Tabs_Locator)).click();
			Thread.sleep(5000);
			
			//Wait for the Maturity Distribution table to get displayed
			Common_Functions.fn_Wait_Property(Driver, Maturity_Distribution_Table_Locator_For_Wait, 60);
						
			//Iterate the data point and run for all the data points
			for (int i = 0; i < DataPoint.size(); i++) {
				
				Tabl = Table.get(i).trim().toString();
				Data_Point = DataPoint.get(i).trim().toString();
				Prty = Priority.get(i).trim().toString();
				Freqncy = Frequency.get(i).trim().toString();
				Tol_Rng = ToleranceRange.get(i).trim().toString();
				SQL_Qry = DBQuery.get(i).trim().toString();
				UILoc = UILocator.get(i).trim().toString();
				AsOfDateLoc = AsOfDateLocator.get(i).toString();
				
				//System.out.println(DataPoint.get(i));
				
				switch (DataPoint.get(i)) {
				
				case "Effective Maturity - Fund": case "Effective Maturity - Index":
					EffectiveMaturity(Tabl, Data_Point, Prty, Freqncy, Tol_Rng, SQL_Qry, UILoc, AsOfDateLoc);					
					break;				
				
				case "Maturity Buckets - Fund": case "Maturity Buckets - Index":  
					MaturityDistribution(Tabl, Data_Point, Prty, Freqncy, Tol_Rng, SQL_Qry, UILoc, AsOfDateLoc);
					break;
					
				case "Region Breakdown (By Country of Exposure) MV% - Fund": case "Region Breakdown (By Country of Exposure) DWE% - Fund": 
					RegionBreakdown(Tabl, Data_Point, Prty, Freqncy, Tol_Rng, SQL_Qry, UILoc, AsOfDateLoc);
					break;
					
				case "Sector Allocation MV% - Fund": case "Sector Allocation DWE% - Fund": case "Sector Allocation MV% - Index": case "Sector Allocation DWE% - Index":
					SectorAllocation(Tabl, Data_Point, Prty, Freqncy, Tol_Rng, SQL_Qry, UILoc, AsOfDateLoc);
					break;
					
				case "S&P": case "Moody's": case "Fitch":
					CreditRating(Tabl, Data_Point, Prty, Freqncy, Tol_Rng, SQL_Qry, UILoc, AsOfDateLoc);
					break;
					
				case "Top 10 Holdings": 
					Top10Holdings(Tabl, Data_Point, Prty, Freqncy, Tol_Rng, SQL_Qry, UILoc, AsOfDateLoc);
					break;
					
				default :
					break;
					
				}
				
			}
			
		} catch (Exception e) {
			
			Common_Functions.fn_Update_HTML(HTMLFile, class_name, "FAIL", "Running the method 'COMPOSITION_TABS_VALIDATION ()'", "Failed to run the method 'COMPOSITION_TABS_VALIDATION ()'", Driver, false);
			
		}
		
	}
		
	public static void EffectiveMaturity(String Table, String DataPoint, String Priority, String Frequency, String Tolerance_Range, String SQL_Query, String UI_Locator, String AsOfDateLocator) throws Throwable {
			
		String App_UI_Value = null;
		String Act_AsOfDate = null;
		String FinalValue = null;
		
		//Get the UI Value for the Data Point
		App_UI_Value = Get_Maturity_Table_Data(UI_Locator);
		
		//Get the UI As Of Date
		if (EffectiveMaturityAsOfDate == null || EffectiveMaturityAsOfDate.isEmpty()) {
			EffectiveMaturityAsOfDate = Common_Functions.fn_Get_UI_AsOfDate(Driver, AsOfDateLocator);
		}
		
		//Get the UI As Of Date
		Act_AsOfDate = EffectiveMaturityAsOfDate;	
		
		//Take the snapshot
		MaturityDistributionscreenshot = Take_Snapshot(Table, MaturityDistributionscreenshot);
		
		//Get the Final Value
		FinalValue = Common_Functions.fn_Calculate_UIElement_UIvsDB_PeriodicCheck_ToleranceApplied_ToleranceThreshold_ActualSwing(class_name, Table, DataPoint, Priority, Frequency, Tolerance_Range, SQL_Query, null, App_UI_Value, Act_AsOfDate, DB_Connect, MaturityDistributionscreenshot);
		
		//Pass the Final value for updating the HTML Array List
		Update_HTML_Array_List(FinalValue);

		//Pass the Final value for updating the Excel Array List
		Update_Excel_Array_List(FinalValue);
		
	}

	//Get the UI Value using the UI Locator
	public static String Get_Maturity_Table_Data(String UILocator){
		
		String UIValue = null;
		
		try {
			element = Driver.findElement(By.cssSelector(UILocator));
			UIValue = element.getText().toString().trim();
		} catch (Exception e) {
			UIValue = null;
		}
		
		return UIValue;
	}

	 
	public static void MaturityDistribution(String Table, String DataPoint, String Priority, String Frequency, String Tolerance_Range, String SQL_Query, String UI_Locator, String AsOfDateLocator) throws Throwable {
				
		ArrayList<String> ThreeColumnValues = new ArrayList<>();
		ArrayList<String> FirstColumnValues = new ArrayList<>();
		ArrayList<String> SecondColumnValues = new ArrayList<>();	
		ArrayList<String> ThirdColumnValues = new ArrayList<>();
		
		String App_UI_Value = null;
		String Modified_SQL=null;
		String Act_AsOfDate = null;
		String FinalValue = null;	
		
		try {
			
		//Get the UI As Of Date
		if (MaturityDistributionAsOfDate == null || MaturityDistributionAsOfDate.isEmpty()) {
			MaturityDistributionAsOfDate = Common_Functions.fn_Get_UI_AsOfDate(Driver, AsOfDateLocator);
		}
		
		//Get the UI As Of Date
		Act_AsOfDate = MaturityDistributionAsOfDate;	
		
		//Take the snapshot
		MaturityDistributionscreenshot = Take_Snapshot(Table, MaturityDistributionscreenshot);	
		
		ThreeColumnValues=Get_Table_3Column_Data(UI_Locator);
		
		//Iterate and get the first column and second column rows separately
		for (int rownum = 0; rownum < ThreeColumnValues.size(); rownum++) {
			
			String[] Splitvalues = ThreeColumnValues.get(rownum).trim().split("\\|");
			
			//Get the First column values for all the rows
			FirstColumnValues.add(Splitvalues[0]);
			
			//Get the second column values for all the rows
			SecondColumnValues.add(Splitvalues[1]);
			
			//Get the second column values for all the rows
			ThirdColumnValues.add(Splitvalues[2]);
			
		}
		
	} catch (Exception e) {
		
		//Take the snapshot
		MaturityDistributionscreenshot = Take_Snapshot(Table, MaturityDistributionscreenshot);
		
		FinalValue = Common_Functions.fn_Calculate_UIElement_UIvsDB_PeriodicCheck_ToleranceApplied_ToleranceThreshold_ActualSwing(class_name, Table, DataPoint, Priority, Frequency, Tolerance_Range, SQL_Query, null, App_UI_Value, Act_AsOfDate, DB_Connect, MaturityDistributionscreenshot);
		
		//Pass the Final value for updating the HTML Array List
		Update_HTML_Array_List(FinalValue);
		
		//Pass the Final value for updating the Excel Array List
		Update_Excel_Array_List(FinalValue);
		
	}
		
		HashMap<String,String> hm=new HashMap<String,String>();
		hm.put("0-1","mat_00_01_yrs");
		hm.put("1-3","mat_01_03_yrs");
		hm.put("3-5","mat_03_05_yrs");
		hm.put("5-10","mat_05_10_yrs");
		hm.put("10-20","mat_10_20_yrs");
		hm.put("20+","mat_ge_20_yrs");
		
		if (DataPoint.equals("Maturity Buckets - Fund")){
			
			if (FirstColumnValues.size() > 0) {		
						
				for (int i = 0; i < FirstColumnValues.size()-1; i++) {
					String Duration=null;
					String FundValue=null;				
					String SelectionField=null;
					
					Duration = FirstColumnValues.get(i);			 
					FundValue = SecondColumnValues.get(i);				
					
					//Modified SQL Query				
					SelectionField=hm.get(Duration);
					Modified_SQL = (SQL_Query.trim().replaceAll("ReplaceAsOfDate",Act_AsOfDate)).trim().replaceAll("ReplaceColName", SelectionField);
					
					//SQL_Query="Select "+SelectionField+" from am_own.acct_asof, am_own.acct_core where acct_asof.acct_no = acct_core.acct_no and acct_core.fund_cusip = '72201R783' and acct_asof.asof_date=to_date('"+Act_AsOfDate+"','mm/dd/yyyy')";
					
					DataPoint = "Fund Value for "+Duration+" yrs";
					App_UI_Value =FundValue;
					
					//Get the Final Value
					FinalValue = Common_Functions.fn_Calculate_UIElement_UIvsDB_PeriodicCheck_ToleranceApplied_ToleranceThreshold_ActualSwing(class_name, Table, DataPoint, Priority, Frequency, Tolerance_Range, Modified_SQL, null, App_UI_Value, Act_AsOfDate, DB_Connect, MaturityDistributionscreenshot);
					
					//Pass the Final value for updating the HTML Array List
					Update_HTML_Array_List(FinalValue);
					
					//Pass the Final value for updating the Excel Array List
					Update_Excel_Array_List(FinalValue);
			
				}
						
			}
					
		}
		
		if (DataPoint.equals("Maturity Buckets - Index")){
			
			if (FirstColumnValues.size() > 0) {			
				
				for (int i = 0; i < FirstColumnValues.size()-1; i++) {
					String Duration=null;
					String IndexValue=null;					
					String SelectionField=null;
					
					Duration = FirstColumnValues.get(i);				
					IndexValue = ThirdColumnValues.get(i);
					
					//Modified SQL Query				
					SelectionField=hm.get(Duration);
					Modified_SQL = (SQL_Query.trim().replaceAll("ReplaceAsOfDate",Act_AsOfDate)).trim().replaceAll("ReplaceColName", SelectionField);
					
					//SQL_Query="Select "+SelectionField+" from am_own.acct_asof, am_own.acct_core, am_own.bogie_asof, am_own.bogie_core where acct_asof.acct_no = acct_core.acct_no and bogie_asof.bogie_no = bogie_core.bogie_no and bogie_asof.acct_no = acct_asof.acct_no and acct_core.fund_cusip = '72201R783' and bogie_asof.asof_date=acct_asof.asof_date and acct_asof.asof_date=to_date('"+Act_AsOfDate+"','mm/dd/yyyy')";
					
					DataPoint = "Index Value for "+Duration+" yrs";
					App_UI_Value =IndexValue;
					
					//Get the Final Value
					FinalValue = Common_Functions.fn_Calculate_UIElement_UIvsDB_PeriodicCheck_ToleranceApplied_ToleranceThreshold_ActualSwing(class_name, Table, DataPoint, Priority, Frequency, Tolerance_Range, Modified_SQL, null, App_UI_Value, Act_AsOfDate, DB_Connect, MaturityDistributionscreenshot);
					
					//Pass the Final value for updating the HTML Array List
					Update_HTML_Array_List(FinalValue);
					
					//Pass the Final value for updating the Excel Array List
					Update_Excel_Array_List(FinalValue);
							
				}
			
			}
				
		}
		
		hm.clear();	
	
	}
		
		//***************************************************************************************************************************************************
		public static void RegionBreakdown(String Table, String DataPoint, String Priority, String Frequency, String Tolerance_Range, String SQL_Query, String UI_Locator, String AsOfDateLocator) throws Throwable {
			
			ArrayList<String> ThreeColumnValues = new ArrayList<>();
			ArrayList<String> FirstColumnValues = new ArrayList<>();
			ArrayList<String> SecondColumnValues = new ArrayList<>();	
			ArrayList<String> ThirdColumnValues = new ArrayList<>();
			
			String App_UI_Value = null;
			String Act_AsOfDate = null;
			String Modified_SQL =null;
			String FinalValue = null;	
			
			try {
				
			//Get the UI As Of Date
			if (RegionBreakdownAsOfDate == null || RegionBreakdownAsOfDate.isEmpty()) {
				RegionBreakdownAsOfDate = Common_Functions.fn_Get_UI_AsOfDate(Driver, AsOfDateLocator);
			}
			
			//Get the UI As Of Date
			Act_AsOfDate = RegionBreakdownAsOfDate;	
			
			//Take the snapshot
			RegionBreakdownscreenshot = Take_Snapshot(Table, RegionBreakdownscreenshot);
		
			ThreeColumnValues=Get_Table_3Column_Data(UI_Locator);
			
			//Iterate and get the first column and second column rows separately
			for (int rownum = 0; rownum < ThreeColumnValues.size()-1; rownum++) {
				
				String[] Splitvalues = ThreeColumnValues.get(rownum).trim().split("\\|");
				
				//Get the First column values for all the rows
				FirstColumnValues.add(Splitvalues[0]);
				
				//Get the second column values for all the rows
				SecondColumnValues.add(Splitvalues[1]);
				
				//Get the second column values for all the rows
				ThirdColumnValues.add(Splitvalues[2]);
				
			}
			
		} catch (Exception e) {
			
			//Take the snapshot
			RegionBreakdownscreenshot = Take_Snapshot(Table, RegionBreakdownscreenshot);
			
			FinalValue = Common_Functions.fn_Calculate_UIElement_UIvsDB_PeriodicCheck_ToleranceApplied_ToleranceThreshold_ActualSwing(class_name, Table, DataPoint, Priority, Frequency, Tolerance_Range, SQL_Query, null, App_UI_Value, Act_AsOfDate, DB_Connect, RegionBreakdownscreenshot);
			
			//Pass the Final value for updating the HTML Array List
			Update_HTML_Array_List(FinalValue);
			
			//Pass the Final value for updating the Excel Array List
			Update_Excel_Array_List(FinalValue);
			
		}	   
			
			if (DataPoint.equals("Region Breakdown (By Country of Exposure) MV% - Fund")){   
				if (FirstColumnValues.size() > 0) {		
						
				for (int i = 0; i < FirstColumnValues.size()-1; i++) {
				String Region=null;
				String MktValueWeight=null;				
				String SelectionField=null;
				
				Region = FirstColumnValues.get(i);			 
				MktValueWeight = SecondColumnValues.get(i);
				
				SelectionField=Region;
				//Modified SQL Query			
				Modified_SQL = (SQL_Query.trim().replaceAll("ReplaceAsOfDate",Act_AsOfDate)).trim().replaceAll("ReplaceCountryName", SelectionField);
				
				//SQL_Query="Select "+SelectionField+" from am_own.acct_asof, am_own.acct_core where acct_asof.acct_no = acct_core.acct_no and acct_core.fund_cusip = '72201R783' and acct_asof.asof_date=to_date('"+Act_AsOfDate+"','mm/dd/yyyy')";
				
				DataPoint ="Mkt Value Weight for "+Region;
				App_UI_Value =MktValueWeight;
				
				//Get the Final Value
				FinalValue = Common_Functions.fn_Calculate_UIElement_UIvsDB_PeriodicCheck_ToleranceApplied_ToleranceThreshold_ActualSwing(class_name, Table, DataPoint, Priority, Frequency, Tolerance_Range, Modified_SQL, null, App_UI_Value, Act_AsOfDate, DB_Connect, RegionBreakdownscreenshot);
				
				//Pass the Final value for updating the HTML Array List
				Update_HTML_Array_List(FinalValue);
				
				//Pass the Final value for updating the Excel Array List
				Update_Excel_Array_List(FinalValue);
			
			}
						
		}
				
			
		}
		
		if (DataPoint.equals("Region Breakdown (By Country of Exposure) DWE% - Fund")){	
				if (FirstColumnValues.size() > 0) {			
				
				for (int i = 0; i < FirstColumnValues.size()-1; i++) {
				String Region=null;
				String DurationWeight=null;					
				String SelectionField=null;
				
				Region = FirstColumnValues.get(i);				
				DurationWeight = ThirdColumnValues.get(i);
				
				//Modified SQL Query				
				SelectionField=Region;
				Modified_SQL = (SQL_Query.trim().replaceAll("ReplaceAsOfDate",Act_AsOfDate)).trim().replaceAll("ReplaceCountryName", SelectionField);
				
				//SQL_Query="Select "+SelectionField+" from am_own.acct_asof, am_own.acct_core, am_own.bogie_asof, am_own.bogie_core where acct_asof.acct_no = acct_core.acct_no and bogie_asof.bogie_no = bogie_core.bogie_no and bogie_asof.acct_no = acct_asof.acct_no and acct_core.fund_cusip = '72201R783' and bogie_asof.asof_date=acct_asof.asof_date and acct_asof.asof_date=to_date('"+Act_AsOfDate+"','mm/dd/yyyy')";
				
				DataPoint = "Duration Weight for "+Region;
				App_UI_Value =DurationWeight;
				
				//Get the Final Value
				FinalValue = Common_Functions.fn_Calculate_UIElement_UIvsDB_PeriodicCheck_ToleranceApplied_ToleranceThreshold_ActualSwing(class_name, Table, DataPoint, Priority, Frequency, Tolerance_Range, Modified_SQL, null, App_UI_Value, Act_AsOfDate, DB_Connect, RegionBreakdownscreenshot);
				
				//Pass the Final value for updating the HTML Array List
				Update_HTML_Array_List(FinalValue);
				
				//Pass the Final value for updating the Excel Array List
				Update_Excel_Array_List(FinalValue);
			
				}
			
			}		
			
		}	
		
		}
		//****************************************************************************************************************************************************************
	public static void SectorAllocation(String Table, String DataPoint, String Priority, String Frequency, String Tolerance_Range, String SQL_Query, String UI_Locator, String AsOfDateLocator) throws Throwable {
			
			ArrayList<String> FiveColumnValues = new ArrayList<>();
			ArrayList<String> FirstColumnValues = new ArrayList<>();
			ArrayList<String> SecondColumnValues = new ArrayList<>();	
			ArrayList<String> ThirdColumnValues = new ArrayList<>();
			ArrayList<String> FourthColumnValues = new ArrayList<>();
			ArrayList<String> FifthColumnValues = new ArrayList<>();
			
			String App_UI_Value = null;
			String Act_AsOfDate = null;
			String Modified_SQL =null;
			String FinalValue = null;	
			
			try {
				
			//Get the UI As Of Date
			if (SectorAllocationAsOfDate == null || SectorAllocationAsOfDate.isEmpty()) {
				SectorAllocationAsOfDate = Common_Functions.fn_Get_UI_AsOfDate(Driver, AsOfDateLocator);
			}
			
			//Get the UI As Of Date
			Act_AsOfDate = SectorAllocationAsOfDate;	
			
			//Take the snapshot
			SectorAllocationscreenshot = Take_Snapshot(Table, SectorAllocationscreenshot);

			FiveColumnValues=Get_Table_5Column_Data(UI_Locator);
			
			//Iterate and get the first column and second column rows separately
			for (int rownum = 0; rownum < FiveColumnValues.size(); rownum++) {
				
				String[] Splitvalues = FiveColumnValues.get(rownum).trim().split("\\|");			
				
				//Get the First column values for all the rows
				FirstColumnValues.add(Splitvalues[0].replaceAll("[0-9]", ""));
				
				//Get the second column values for all the rows
				SecondColumnValues.add(Splitvalues[1]);
				
				//Get the third column values for all the rows
				ThirdColumnValues.add(Splitvalues[2]);
				
				//Get the fourth column values for all the rows
				FourthColumnValues.add(Splitvalues[3]);
				
				//Get the fifth column values for all the rows
				FifthColumnValues.add(Splitvalues[4]);
				
			}
			
		} catch (Exception e) {
			
			//Take the snapshot
			SectorAllocationscreenshot = Take_Snapshot(Table, SectorAllocationscreenshot);
			
			FinalValue = Common_Functions.fn_Calculate_UIElement_UIvsDB_PeriodicCheck_ToleranceApplied_ToleranceThreshold_ActualSwing(class_name, Table, DataPoint, Priority, Frequency, Tolerance_Range, SQL_Query, null, App_UI_Value, Act_AsOfDate, DB_Connect, SectorAllocationscreenshot);
			
			//Pass the Final value for updating the HTML Array List
			Update_HTML_Array_List(FinalValue);
			
			//Pass the Final value for updating the Excel Array List
			Update_Excel_Array_List(FinalValue);
			
		}	   
			
			if (DataPoint.equals("Sector Allocation MV% - Fund")){   
				if (FirstColumnValues.size() > 0) {		
						
				for (int i = 0; i < FirstColumnValues.size(); i++) {
				String Sector=null;
				String MV_Fund=null;				
				String SelectionField=null;
				
				Sector = FirstColumnValues.get(i);
				if (Sector.equals("U.S. Government-Related") || Sector.equals("U.S. Government Related")) {
					Sector="US Government Related";	
				}
				if (Sector.equals("Investment Grade Credit")) {
					Sector="Invest. Grade Credit";	
					
				}			
				if (Sector.equals("Other")) {
					Sector="Municipal/Other";	
				}
				if (Sector.equals("Non-U.S. Developed")) {
					Sector="Non-USD Developed";	
				}
				
				MV_Fund = SecondColumnValues.get(i);
				
				SelectionField=Sector;
				
				//Modified SQL Query			
				Modified_SQL = (SQL_Query.trim().replaceAll("ReplaceAsOfDate",Act_AsOfDate)).trim().replaceAll("ReplaceSectorName", SelectionField);			
				
				DataPoint ="Sector Allocation MV% - Fund - "+Sector;
				App_UI_Value = MV_Fund;
				
				//Get the Final Value
				FinalValue = Common_Functions.fn_Calculate_UIElement_UIvsDB_PeriodicCheck_ToleranceApplied_ToleranceThreshold_ActualSwing(class_name, Table, DataPoint, Priority, Frequency, Tolerance_Range, Modified_SQL, null, App_UI_Value, Act_AsOfDate, DB_Connect, SectorAllocationscreenshot);
				
				//Pass the Final value for updating the HTML Array List
				Update_HTML_Array_List(FinalValue);
				
				//Pass the Final value for updating the Excel Array List
				Update_Excel_Array_List(FinalValue);
			
			}
						
		}
				
			
		}
		
		if (DataPoint.equals("Sector Allocation DWE% - Fund")){	
				if (FirstColumnValues.size() > 0) {			
				
				for (int i = 0; i < FirstColumnValues.size(); i++) {
				String Sector=null;
				String DWE_Fund=null;					
				String SelectionField=null;
				
				Sector = FirstColumnValues.get(i);
				if (Sector.equals("U.S. Government-Related") || Sector.equals("U.S. Government Related")) {
					Sector="US Government Related";	
				}
				if (Sector.equals("Investment Grade Credit")) {
					Sector="Invest. Grade Credit";	
				}			
				if (Sector.equals("Other")) {
					Sector="Municipal/Other";	
				}
				if (Sector.equals("Non-U.S. Developed")) {
					Sector="Non-USD Developed";	
				}	
				DWE_Fund = FourthColumnValues.get(i);
				
				//Modified SQL Query				
				SelectionField=Sector;
				Modified_SQL = (SQL_Query.trim().replaceAll("ReplaceAsOfDate",Act_AsOfDate)).trim().replaceAll("ReplaceSectorName", SelectionField);
				
				//SQL_Query="Select "+SelectionField+" from am_own.acct_asof, am_own.acct_core, am_own.bogie_asof, am_own.bogie_core where acct_asof.acct_no = acct_core.acct_no and bogie_asof.bogie_no = bogie_core.bogie_no and bogie_asof.acct_no = acct_asof.acct_no and acct_core.fund_cusip = '72201R783' and bogie_asof.asof_date=acct_asof.asof_date and acct_asof.asof_date=to_date('"+Act_AsOfDate+"','mm/dd/yyyy')";
				
				DataPoint = "Sector Allocation DWE% - Fund - "+Sector;
				App_UI_Value =DWE_Fund;
				
				//Get the Final Value
				FinalValue = Common_Functions.fn_Calculate_UIElement_UIvsDB_PeriodicCheck_ToleranceApplied_ToleranceThreshold_ActualSwing(class_name, Table, DataPoint, Priority, Frequency, Tolerance_Range, Modified_SQL, null, App_UI_Value, Act_AsOfDate, DB_Connect, SectorAllocationscreenshot);
				
				//Pass the Final value for updating the HTML Array List
				Update_HTML_Array_List(FinalValue);
				
				//Pass the Final value for updating the Excel Array List
				Update_Excel_Array_List(FinalValue);
			
			}
			
		}		
			
		}
		
		if (DataPoint.equals("Sector Allocation MV% - Index")){	
			if (FirstColumnValues.size() > 0) {			
			
			for (int i = 0; i < FirstColumnValues.size(); i++) {
			String Sector=null;
			String Mv_Index=null;					
			//String SelectionField=null;
			
			Sector = FirstColumnValues.get(i);				
			Mv_Index = ThirdColumnValues.get(i);	
			
			DataPoint = "Sector Allocation MV% - Index - "+Sector;
			App_UI_Value = Mv_Index;
			
			//Get the Final Value
			FinalValue = Common_Functions.fn_Calculate_UIElement_UIvsDB_PeriodicCheck_ToleranceApplied_ToleranceThreshold_ActualSwing(class_name, Table, DataPoint, Priority, Frequency, Tolerance_Range, SQL_Query, null, App_UI_Value, Act_AsOfDate, DB_Connect, SectorAllocationscreenshot);
			
			//Pass the Final value for updating the HTML Array List
			Update_HTML_Array_List(FinalValue);
			
			//Pass the Final value for updating the Excel Array List
			Update_Excel_Array_List(FinalValue);
		
		}
		
	}		
		
	}
		
		if (DataPoint.equals("Sector Allocation DWE% - Index")){	
			if (FirstColumnValues.size() > 0) {			
			
			for (int i = 0; i < FirstColumnValues.size(); i++) {
			String Sector=null;
			String DWE_Index=null;					
			String SelectionField=null;
			
			Sector = FirstColumnValues.get(i);				
			DWE_Index = FifthColumnValues.get(i);
			
			//Modified SQL Query				
			SelectionField=Sector;
			Modified_SQL = (SQL_Query.trim().replaceAll("ReplaceAsOfDate",Act_AsOfDate)).trim().replaceAll("ReplaceCountryName", SelectionField);
			
			//SQL_Query="Select "+SelectionField+" from am_own.acct_asof, am_own.acct_core, am_own.bogie_asof, am_own.bogie_core where acct_asof.acct_no = acct_core.acct_no and bogie_asof.bogie_no = bogie_core.bogie_no and bogie_asof.acct_no = acct_asof.acct_no and acct_core.fund_cusip = '72201R783' and bogie_asof.asof_date=acct_asof.asof_date and acct_asof.asof_date=to_date('"+Act_AsOfDate+"','mm/dd/yyyy')";
			
			DataPoint = "Sector Allocation DWE% - Index - "+Sector;
			App_UI_Value =DWE_Index;
			
			//Get the Final Value
			FinalValue = Common_Functions.fn_Calculate_UIElement_UIvsDB_PeriodicCheck_ToleranceApplied_ToleranceThreshold_ActualSwing(class_name, Table, DataPoint, Priority, Frequency, Tolerance_Range, SQL_Query, null, App_UI_Value, Act_AsOfDate, DB_Connect, SectorAllocationscreenshot);
			
			//Pass the Final value for updating the HTML Array List
			Update_HTML_Array_List(FinalValue);
			
			//Pass the Final value for updating the Excel Array List
			Update_Excel_Array_List(FinalValue);
		
		}
		
	}		
		
	}
		
		}
	//***********************************************************************************************************************************************************************
	
	public static void CreditRating(String Table, String DataPoint, String Priority, String Frequency, String Tolerance_Range, String SQL_Query, String UI_Locator, String AsOfDateLocator) throws Throwable {
		
		ArrayList<String> TwoColumnValues = new ArrayList<>();
		ArrayList<String> FirstColumnValues = new ArrayList<>();
		ArrayList<String> SecondColumnValues = new ArrayList<>();	
			
		String App_UI_Value = null;
		String Act_AsOfDate = null;	
		String FinalValue = null;
		String RadioLocator = null;
		
		try {		
			
			
		//Get the UI As Of Date
		if (CreditRatingAsOfDate == null || CreditRatingAsOfDate.isEmpty()) {
			CreditRatingAsOfDate = Common_Functions.fn_Get_UI_AsOfDate(Driver, AsOfDateLocator);			
		}
		
		//Get the UI As Of Date
		Act_AsOfDate = CreditRatingAsOfDate;
		
		if (DataPoint.equals("S&P")){ 
			RadioLocator=CreditRating_SPRadio_Locator;
			Table=Table+"-S&P table";
			
			//Click on the S&P/Moody's/Fitch Radio Button
			Driver.findElement(By.cssSelector(RadioLocator)).click();
			Thread.sleep(5000);	
			
			//Take the snapshot
			CreditRatingscreenshot_SandP = Take_Snapshot(Table, CreditRatingscreenshot_SandP);
			CreditRatingscreenshot = CreditRatingscreenshot_SandP;
		}
		if (DataPoint.equals("Moody's")){ 
			RadioLocator=CreditRating_MoodyRadio_Locator;
			Table=Table+"-Moody's table";
			
			//Click on the S&P/Moody's/Fitch Radio Button
			Driver.findElement(By.cssSelector(RadioLocator)).click();
			Thread.sleep(5000);	
			
			//Take the snapshot
			CreditRatingscreenshot_Moodys = Take_Snapshot(Table, CreditRatingscreenshot_Moodys);
			CreditRatingscreenshot = CreditRatingscreenshot_Moodys;
		}
		if (DataPoint.equals("Fitch")){ 
			RadioLocator=CreditRating_FitchRadio_Locator;
			Table=Table+"-Fitch table";
			
			//Click on the S&P/Moody's/Fitch Radio Button
			Driver.findElement(By.cssSelector(RadioLocator)).click();
			Thread.sleep(5000);	
			
			//Take the snapshot
			CreditRatingscreenshot_Fitch = Take_Snapshot(Table, CreditRatingscreenshot_Fitch);
			CreditRatingscreenshot = CreditRatingscreenshot_Fitch;
		}	
			
		
		TwoColumnValues=Get_Two_Column_Data(UI_Locator);
		
		//Iterate and get the first column and second column rows separately
		for (int rownum = 0; rownum < TwoColumnValues.size(); rownum++) {
			
			String[] Splitvalues = TwoColumnValues.get(rownum).trim().split("\\|");
			
			//Get the First column values for all the rows
			FirstColumnValues.add(Splitvalues[0]);
			
			//Get the second column values for all the rows
			SecondColumnValues.add(Splitvalues[1]);	
			
		}
		int FirstColumnSize=0;
		
		if (FirstColumnValues.size() > 1){
			FirstColumnSize=FirstColumnValues.size()-1;	
		}
			else		{
			FirstColumnSize=FirstColumnValues.size();	
		}
		
		
		if (FirstColumnSize > 0) {		
			
			for (int i = 0; i < FirstColumnValues.size(); i++) {
				
			String Rating=null;
			String Fund=null;				
			String Final_DataPoint = null;
			
			Rating = FirstColumnValues.get(i);			 
			Fund = SecondColumnValues.get(i);
			
			Final_DataPoint = DataPoint+" - '"+Rating+"' Fund";
			App_UI_Value = Fund;
			
			//Get the Final Value
			FinalValue = Common_Functions.fn_Calculate_UIElement_UIvsDB_PeriodicCheck_ToleranceApplied_ToleranceThreshold_ActualSwing(class_name, Table, Final_DataPoint, Priority, Frequency, Tolerance_Range, SQL_Query, null, App_UI_Value, Act_AsOfDate, DB_Connect, CreditRatingscreenshot);
			
			//Pass the Final value for updating the HTML Array List
			Update_HTML_Array_List(FinalValue);
		
			//Pass the Final value for updating the Excel Array List
			Update_Excel_Array_List(FinalValue);
			
		}
					
	}
		
		
		
	} catch (Exception e) {
		
		//Take the snapshot
		CreditRatingscreenshot = Take_Snapshot(Table, CreditRatingscreenshot);
		
		FinalValue = Common_Functions.fn_Calculate_UIElement_UIvsDB_PeriodicCheck_ToleranceApplied_ToleranceThreshold_ActualSwing(class_name, Table, DataPoint, Priority, Frequency, Tolerance_Range, SQL_Query, null, App_UI_Value, Act_AsOfDate, DB_Connect, CreditRatingscreenshot);
		
		//Pass the Final value for updating the HTML Array List
		Update_HTML_Array_List(FinalValue);
		
		//Pass the Final value for updating the Excel Array List
		Update_Excel_Array_List(FinalValue);
		
	}		

	}
	//**********************************************************************************************************************************************************************************
	public static void Top10Holdings(String Table, String DataPoint, String Priority, String Frequency, String Tolerance_Range, String SQL_Query, String UI_Locator, String AsOfDateLocator) throws Throwable {
		
		ArrayList<String> TwoColumnValues = new ArrayList<>();
		ArrayList<String> FirstColumnValues = new ArrayList<>();
		ArrayList<String> SecondColumnValues = new ArrayList<>();	
			
		String App_UI_Value = null;
		String Act_AsOfDate = null;	
		String FinalValue = null;
		
		try {	
			
			
		//Get the UI As Of Date
		if (Top10HoldingAsOfDate == null || Top10HoldingAsOfDate.isEmpty()) {
			Top10HoldingAsOfDate = Common_Functions.fn_Get_UI_AsOfDate(Driver, AsOfDateLocator);
			
			//Take the snapshot
			Top10Holdingscreenshot = Take_Snapshot(Table, Top10Holdingscreenshot);
		}
		
		//Get the UI As Of Date
		Act_AsOfDate = Top10HoldingAsOfDate;
		
		TwoColumnValues=Get_Two_Column_Data(UI_Locator);
		
		//Iterate and get the first column and second column rows separately
		for (int rownum = 0; rownum < TwoColumnValues.size(); rownum++) {
			
			String[] Splitvalues = TwoColumnValues.get(rownum).trim().split("\\|");
			
			//Get the First column values for all the rows
			FirstColumnValues.add(Splitvalues[0]);
			
			//Get the second column values for all the rows
			SecondColumnValues.add(Splitvalues[1]);	
			
		}
		
		if (FirstColumnValues.size() > 0) {		
			
			for (int i = 0; i < FirstColumnValues.size() ; i++) {
			String Holding=null;
			String NetAsset=null;				
			
			
			Holding = FirstColumnValues.get(i);			 
			NetAsset = SecondColumnValues.get(i);	
			
			
			DataPoint ="% Net Asset-"+Holding;
			App_UI_Value = NetAsset;
			
			//Get the Final Value
			FinalValue = Common_Functions.fn_Calculate_UIElement_UIvsDB_PeriodicCheck_ToleranceApplied_ToleranceThreshold_ActualSwing(class_name, Table, DataPoint, Priority, Frequency, Tolerance_Range, SQL_Query, null, App_UI_Value, Act_AsOfDate, DB_Connect, Top10Holdingscreenshot);
			
			//Pass the Final value for updating the HTML Array List
			Update_HTML_Array_List(FinalValue);
			
			//Pass the Final value for updating the Excel Array List
			Update_Excel_Array_List(FinalValue);
		
		}
					
	}
		
		
		
	} catch (Exception e) {
		
		//Take the snapshot
		Top10Holdingscreenshot = Take_Snapshot(Table, Top10Holdingscreenshot);
		
		FinalValue = Common_Functions.fn_Calculate_UIElement_UIvsDB_PeriodicCheck_ToleranceApplied_ToleranceThreshold_ActualSwing(class_name, Table, DataPoint, Priority, Frequency, Tolerance_Range, SQL_Query, null, App_UI_Value, Act_AsOfDate, DB_Connect, Top10Holdingscreenshot);
		
		//Pass the Final value for updating the HTML Array List
		Update_HTML_Array_List(FinalValue);
		
		//Pass the Final value for updating the Excel Array List
		Update_Excel_Array_List(FinalValue);
		
	}		

	}


	//**********************************************************************************************************************************************************

	//Get the Table Column data for Maturity Distribution table

	public static ArrayList<String> Get_Table_3Column_Data(String CSS_Locator) {
		
		int Rowcount = 0;		
		
	    String FirstColumnData = null;        
	    String SecondColumnData = null;
	    String ThirdColumnData = null;  
	    ArrayList<String> FinalData = new ArrayList<>();
	    
	    try {
		
		WebElement Table1 = Driver.findElement(By.cssSelector(CSS_Locator));
		java.util.List<WebElement> Rows = Table1.findElements(By.tagName("tr"));
		
		//Get the Row Count
		Rowcount = Rows.size();
				
		//Get all the columns into a array list
		if (Rowcount != 0) {
			//Iterate the Rows
			for (int Rownum = 1; Rownum < Rowcount; Rownum++) {
				java.util.List<WebElement> columns = Rows.get(Rownum).findElements(By.tagName("td"));
				FirstColumnData = columns.get(0).getText().toString().trim();
	            SecondColumnData = columns.get(1).getText().toString().trim();
	            ThirdColumnData = columns.get(2).getText().toString().trim();
	            FinalData.add(FirstColumnData+"|"+SecondColumnData+"|"+ThirdColumnData);
		 
			    }
			
		    }
		
	    }
	    
	     catch (Exception e) {
	    	 
	    }
	    
	    return FinalData;    
	}
	//******************************************************************************************************************************************************
	public static ArrayList<String> Get_Table_5Column_Data(String CSS_Locator) {
		
		int Rowcount = 0;		
		
	    String FirstColumnData = null;        
	    String SecondColumnData = null;
	    String ThirdColumnData = null;
	    String FourthColumnData = null;
	    String FifthColumnData = null; 
	    ArrayList<String> FinalData = new ArrayList<>();
	    
	    try {
		
		WebElement Table1 = Driver.findElement(By.cssSelector(CSS_Locator));
		java.util.List<WebElement> Rows = Table1.findElements(By.tagName("tr"));
		
		//Get the Row Count
		Rowcount = Rows.size();
				
		//Get all the columns into a array list
		if (Rowcount != 0) {
			//Iterate the Rows
			for (int Rownum = 2; Rownum < Rowcount; Rownum++) {
				java.util.List<WebElement> columns = Rows.get(Rownum).findElements(By.tagName("td"));
				FirstColumnData = columns.get(0).getText().toString().trim();
	            SecondColumnData = columns.get(1).getText().toString().trim();
	            ThirdColumnData = columns.get(2).getText().toString().trim();
	            FourthColumnData = columns.get(3).getText().toString().trim();
	            FifthColumnData = columns.get(4).getText().toString().trim();
	            
	            FinalData.add(FirstColumnData+"|"+SecondColumnData+"|"+ThirdColumnData+"|"+FourthColumnData+"|"+FifthColumnData);
		 
			    }
			
		    }
		
	    }
	    
	     catch (Exception e) {
	    	 
	    }
	    
	    return FinalData;    
	} 

	//******************************************************************************************************************************************************************

	public static ArrayList<String> Get_Two_Column_Data(String CSS_Locator) {

	int Rowcount = 0;
	String FirstColumnData = null;
	String SecondColumnData = null;

	ArrayList<String> FinalData = new ArrayList<>();

	WebElement Table = Driver.findElement(By.cssSelector(CSS_Locator));
	java.util.List<WebElement> Rows = Table.findElements(By.tagName("tr"));

	//Get the Row Count
	Rowcount = Rows.size();
			
	//Get all the columns into a array list
	if (Rowcount != 0) {
		//Iterate the Rows
		for (int Rownum = 1; Rownum < Rowcount; Rownum++) {
			java.util.List<WebElement> columns = Rows.get(Rownum).findElements(By.tagName("td"));
			FirstColumnData = columns.get(0).getText().toString().trim();
			SecondColumnData = columns.get(1).getText().toString().trim();
			FinalData.add(FirstColumnData+"|"+SecondColumnData); 
		}
	}

	return FinalData;	
	}
		//****************************************************************************************************************************************************************
		//Take snapshot
	 	public static String Take_Snapshot(String TableName, String snapshotpath) {
			
			boolean SnapshotTaken = false;
			String ScreenshotLocation = null;
			
			//Verify the table name is null
			if (snapshotpath == null || snapshotpath.isEmpty()) {
				SnapshotTaken = false;
			} else {
				SnapshotTaken = true;
			}
			
			//Take the snapshot if it is not already taken
			if (!SnapshotTaken) {
				ScreenshotLocation = Common_Functions.fn_Capture_Screenshot(HTMLFile, Driver);
				try {
					Common_Functions.fn_Update_HTML(HTMLFile,class_name,"PASS","Take the snapshot for the table "+Common_Functions.BlueNormal_Start+TableName+Common_Functions.BlueNormal_End,"Snapshot taken for the table"+Common_Functions.NextLine+Common_Functions.BlueNormal_Start+TableName+Common_Functions.BlueNormal_End, Driver, ScreenshotLocation);
				} catch (Throwable e) {
					e.printStackTrace();
				}
			} else if (SnapshotTaken) {
				ScreenshotLocation = snapshotpath ;
			}
			
			return ScreenshotLocation;
		}
		
		//Update the HTML Array List
		public static void Update_HTML_Array_List(String FinalValue) {
			
			String SplitFinalValue[] = null;
			
			//Split the value with "|"
			SplitFinalValue = FinalValue.split("\\|");

			//Get the Table
			HTML_Table.add(SplitFinalValue[1]);
			
			//Get the Data Point
			HTML_Data_Point.add(SplitFinalValue[2]);
					
			//Get the UI Value
			HTML_UI_Value.add(SplitFinalValue[9]);
			
			//Get the UI Status
			HTML_UI_Status.add(SplitFinalValue[7]);
			
			//Get the DB Query
			HTML_DB_Query.add(SplitFinalValue[6]);
			
			//Get the DB Value
			HTML_DB_Value.add(SplitFinalValue[10]);

			//Get the UIVsDB Status
			HTML_UIVsDB_Status.add(SplitFinalValue[8]);
			
			//Get the Expected As Of Date
			HTML_ExpectedAsOfDate.add(SplitFinalValue[12]);
			
			//Get the Actual As Of Date
			HTML_ActualAsOfDate.add(SplitFinalValue[13]);

			//Get the As Of Date check status
			HTML_AsOfDate_Status.add(SplitFinalValue[11]);
			
			//Get the Snapshot Path
			HTML_SnapshotPath.add(SplitFinalValue[17]);
			
		}
		
		//Empty the HTML Array List
		public static void Empty_HTML_Array_List() {
			
			//Get the Table
			HTML_Table.clear();
			
			//Get the Data Point
			HTML_Data_Point.clear();
					
			//Get the UI Value
			HTML_UI_Value.clear();
			
			//Get the UI Status
			HTML_UI_Status.clear();
			
			//Get the DB Query
			HTML_DB_Query.clear();
			
			//Get the DB Value
			HTML_DB_Value.clear();

			//Get the UIVsDB Status
			HTML_UIVsDB_Status.clear();
			
			//Get the Expected As Of Date
			HTML_ExpectedAsOfDate.clear();
			
			//Get the Actual As Of Date
			HTML_ActualAsOfDate.clear();

			//Get the As Of Date check status
			HTML_AsOfDate_Status.clear();
			
			//Get the Snapshot Path
			HTML_SnapshotPath.clear();
		 
		}

		
		//Make all the Array List as empty
		public static void fn_Empty_Excel_Array_List() {
			Excel_WebsiteTab.clear();
			Excel_Table.clear();
			Excel_DataPoint.clear();
			Excel_Priority.clear();
			Excel_Frequency.clear();
			Excel_Tolerance_Range.clear();
			Excel_Modified_SQL.clear();
			Excel_UI_Element.clear();
			Excel_UI_Vs_DB.clear();
			Excel_UI_Value.clear();
			Excel_DB_Value.clear();
			Excel_Periodic_Check.clear();
			Excel_Expected_Date.clear();
			Excel_Actual_Date.clear();
			Excel_Tolerance_Applied.clear();
			Excel_Tolerance_Treshold.clear();
			Excel_Actual_Swing.clear();
			Excel_Snapshot.clear();
		}

		//Update the Excel Array List
		public static void Update_Excel_Array_List(String FinalValue) {
			
			String SplitFinalExcelValue[] = null;
			
			//Split the value with "|"
			SplitFinalExcelValue = FinalValue.split("\\|");
			
			String Final_DB_Query = null;
			String Final_UI_Vs_DB_Status = null;
			String Final_UI_Value = null;
			String Final_DB_Value = null;
			String Final_Excel_Tolerance_Applied = null;
			String Final_Excel_Tolerance_Threshold = null;
			String Final_Excel_Actual_Swing = null;
			
			//Assign the values to the array list to update the excel
			Excel_WebsiteTab.add(SplitFinalExcelValue[0]);
			Excel_Table.add(SplitFinalExcelValue[1]);
			Excel_DataPoint.add(SplitFinalExcelValue[2]);
			Excel_Priority.add(SplitFinalExcelValue[3]);
			Excel_Frequency.add(SplitFinalExcelValue[4]);
			Excel_Tolerance_Range.add(SplitFinalExcelValue[5]);
			
			if (SplitFinalExcelValue[6] == null || SplitFinalExcelValue[6].isEmpty()) {
				Final_DB_Query = "";
			} else if (SplitFinalExcelValue[6].equalsIgnoreCase("null")) {
				Final_DB_Query = "";
			} else {
				Final_DB_Query = SplitFinalExcelValue[6];
			}
			
			Excel_Modified_SQL.add(Final_DB_Query);
			Excel_UI_Element.add(SplitFinalExcelValue[7]);
			
			if (SplitFinalExcelValue[8] == null || SplitFinalExcelValue[8].isEmpty()) {
				Final_UI_Vs_DB_Status = "";
			} else if (SplitFinalExcelValue[8].equalsIgnoreCase("null")) {
				Final_UI_Vs_DB_Status = "";
			} else {
				Final_UI_Vs_DB_Status = SplitFinalExcelValue[8];
			}
			
			Excel_UI_Vs_DB.add(Final_UI_Vs_DB_Status);
			
			if (SplitFinalExcelValue[9] == null || SplitFinalExcelValue[9].isEmpty()) {
				Final_UI_Value = "";
			} else if (SplitFinalExcelValue[9].equalsIgnoreCase("null")) {
				Final_UI_Value = "";
			} else {
				Final_UI_Value = SplitFinalExcelValue[9];
			}
			
			Excel_UI_Value.add(Final_UI_Value);
			
			if (SplitFinalExcelValue[10] == null || SplitFinalExcelValue[10].isEmpty()) {
				Final_DB_Value = "";
			} else if (SplitFinalExcelValue[10].equalsIgnoreCase("null")){
				Final_DB_Value = "";
			} else {
				Final_DB_Value = SplitFinalExcelValue[10];
			}
			
			Excel_DB_Value.add(Final_DB_Value);
			Excel_Periodic_Check.add(SplitFinalExcelValue[11]);
			Excel_Expected_Date.add(SplitFinalExcelValue[12]);
			Excel_Actual_Date.add(SplitFinalExcelValue[13]);
			
			if (SplitFinalExcelValue[14] == null || SplitFinalExcelValue[14].isEmpty()) {
				Final_Excel_Tolerance_Applied = "";
			} else if (SplitFinalExcelValue[14].equalsIgnoreCase("null")) {
				Final_Excel_Tolerance_Applied = "";
			} else {
				Final_Excel_Tolerance_Applied = SplitFinalExcelValue[14];
			}
			
			Excel_Tolerance_Applied.add(Final_Excel_Tolerance_Applied);
			
			if (SplitFinalExcelValue[15] == null || SplitFinalExcelValue[15].isEmpty()) {
				Final_Excel_Tolerance_Threshold = "";
			} else if (SplitFinalExcelValue[15].equalsIgnoreCase("null")) {
				Final_Excel_Tolerance_Threshold = "";
			} else {
				Final_Excel_Tolerance_Threshold = SplitFinalExcelValue[15];
			}
			
			Excel_Tolerance_Treshold.add(Final_Excel_Tolerance_Threshold);
			
			if (SplitFinalExcelValue[16] == null || SplitFinalExcelValue[16].isEmpty()) {
				Final_Excel_Actual_Swing = "";
			} else if (SplitFinalExcelValue[16].equalsIgnoreCase("null")) {
				Final_Excel_Actual_Swing = "";
			} else {
				Final_Excel_Actual_Swing = SplitFinalExcelValue[16];
			}
			
			Excel_Actual_Swing.add(Final_Excel_Actual_Swing);
			Excel_Snapshot.add(SplitFinalExcelValue[17]);
			
		}
		
}
